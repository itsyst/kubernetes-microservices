Your provided YAMLs define a PersistentVolume (pv-volume), a PersistentVolumeClaim (pv-claim), and a Pod (pv-pod) that uses the PVC to mount storage at /usr/share/nginx/html. However, there are a few issues to fix to ensure everything works correctly in your Minikube cluster, especially since you’re trying to create a file (hellothere) inside new pod's mounted volume with kubectl exec -it pv-pod -- touch /usr/share/nginx/html/hellothere. Let’s address potential problems and verify your setup.
Issues to Fix

    Multiple Kinds in One File: Your YAMLs are separate kind definitions but presented together. They need to be in separate files or separated by --- in a single file.
    StorageClass Mismatch: Minikube’s default StorageClass is standard, not demo. Using demo without defining it will leave the PVC unbound unless you create a custom StorageClass.
    Storage Request Mismatch: The PV offers 2Gi, but the PVC requests 1Gi. This is fine (PVC can request less), but let’s align them for clarity.
    Existing Resources: Your earlier kubectl get pods pv-pod -o wide showed a pv-pod running, but we need to ensure it matches this new definition and the PVC/PV are correctly bound.

Step 1: Fix and Apply the YAMLs

Let’s update the resources to work with Minikube’s default StorageClass (standard) and structure them properly.
Combined YAML (pv-demo.yaml)
bash
cat <<EOF > pv-demo.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume
  labels:
    type: local
spec:
  storageClassName: standard  # Use Minikube's default StorageClass
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mydata"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pv-claim
spec:
  storageClassName: standard  # Match PV
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi  # Match PV capacity
---
kind: Pod
apiVersion: v1
metadata:
  name: pv-pod
spec:
  volumes:
    - name: pv-storage
      persistentVolumeClaim:
        claimName: pv-claim
  containers:
    - name: pv-container
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: pv-storage
EOF
Apply the Resources

Delete any existing resources to avoid conflicts, then apply:
bash
kubectl delete pod pv-pod --force --grace-period=0  # If already exists
kubectl delete pvc pv-claim
kubectl delete pv pv-volume
kubectl apply -f pv-demo.yaml
Step 2: Verify the Setup
Check PersistentVolume
bash
kubectl get pv

Expected:
text
NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM              STORAGECLASS   REASON   AGE
pv-volume   2Gi        RWO            Retain           Bound    default/pv-claim   standard                1m
Check PersistentVolumeClaim
bash
kubectl get pvc

Expected:
text
NAME       STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   AGE
pv-claim   Bound    pv-volume   2Gi        RWO            standard       1m
Check Pod
bash
kubectl get pods pv-pod -o wide

Expected:
text
NAME     READY   STATUS    RESTARTS   AGE   IP            NODE       NOMINATED NODE   READINESS GATES
pv-pod   1/1     Running   0          1m    10.244.0.X    minikube   <none>           <none>
Step 3: Access and Modify the Mounted Volume

Now, create the hellothere file inside the pod’s mounted volume:
bash
kubectl exec -it pv-pod -- touch /usr/share/nginx/html/hellothere
Verify the File

Exec into the pod and check:
bash
kubectl exec -it pv-pod -- ls /usr/share/nginx/html

Expected output:
text
hellothere
Optional: Add Content

If you want to add content to the file:
bash
kubectl exec -it pv-pod -- bash -c "echo 'Hello from pv-pod' > /usr/share/nginx/html/hellothere"
kubectl exec -it pv-pod -- cat /usr/share/nginx/html/hellothere

Expected:
text
Hello from pv-pod
Step 4: Access from Minikube VM (Optional)

Since the PV uses hostPath: /mydata, you can verify the file on the Minikube VM:
bash
minikube ssh
ls /mydata
cat /mydata/hellothere
exit

Expected:
text
hellothere
Hello from pv-pod  # If you added content
Troubleshooting

    If PVC Isn’t Bound:
        Check kubectl describe pvc pv-claim for errors (e.g., StorageClass mismatch).
        Ensure Minikube’s standard StorageClass is available:
        bash

    kubectl get storageclass

If Pod Fails to Start:

    Check kubectl describe pod pv-pod for errors (e.g., image pull or mount issues).

If touch Fails:

    Ensure the nginx container allows write access. If not, try a different image (e.g., busybox):
    yaml

        containers:
        - name: pv-container
          image: busybox
          command: ["sleep", "3600"]  # Keep pod running
          volumeMounts:
          - mountPath: "/usr/share/nginx/html"
            name: pv-storage

Full Command Sequence
bash
# Apply fixed resources
cat <<EOF > pv-demo.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mydata"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pv-claim
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
kind: Pod
apiVersion: v1
metadata:
  name: pv-pod
spec:
  volumes:
    - name: pv-storage
      persistentVolumeClaim:
        claimName: pv-claim
  containers:
    - name: pv-container
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: pv-storage
EOF

kubectl delete pod pv-pod --force --grace-period=0
kubectl delete pvc pv-claim
kubectl delete pv pv-volume
kubectl apply -f pv-demo.yaml

# Verify
kubectl get pv
kubectl get pvc
kubectl get pods pv-pod -o wide

# Create and check file
kubectl exec -it pv-pod -- touch /usr/share/nginx/html/hellothere
kubectl exec -it pv-pod -- ls /usr/share/nginx/html
Next Steps

Run the commands above and share the output of:

    kubectl get pvc
    kubectl get pods pv-pod -o wide
    kubectl exec -it pv-pod -- ls /usr/share/nginx/html

This will confirm your PV, PVC, and pod are working, and you’ve successfully created hellothere in /mydata.